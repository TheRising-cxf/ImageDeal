#include"BeautyCamera.h"
#include"Common.h"
#include<stdlib.h>
#include<math.h>
#include<string.h>
#include"ImageDeal.h"
int F_BeautyCamera_GrindMode(unsigned char* srcData, int width, int height, int channels,int ratio, int Mode) {
	int ret = 0;
	if (Mode == 0) {
		ret = F_GrindskinByGaussFilter(srcData,  width,  height,  channels, 1, ratio);
	}
	else if (Mode == 1) {
		ret = F_Softskin_DetailsAddingMethod(srcData, width, height, channels, ratio,150);
	}
	else if (Mode == 2) {
		ret = F_Softskin_HP(srcData, width, height, channels, 50,ratio);
	}
	return ret;
}
int F_BeautyCamera_WhiteMode(unsigned char* srcData, int width, int height, int channels, int ratio,int Mode) {
	unsigned char lightMap[256] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 58, 60, 62, 64, 66, 69, 71, 74, 76, 78, 80, 82, 84, 85, 87, 88, 90, 92, 93, 94, 96, 97, 99, 100, 102, 104, 105, 106, 108, 109, 111, 113, 115, 116, 118, 120, 122, 124, 127, 129, 131, 133, 136, 138, 139, 141, 142, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 190, 191, 192, 193, 194, 195, 196, 196, 197, 198, 199, 200, 200, 201, 202, 203, 203, 204, 205, 206, 206, 207, 208, 209, 209, 210, 211, 211, 212, 213, 213, 214, 215, 215, 216, 217, 217, 218, 218, 219, 220, 220, 221, 221, 222, 223, 223, 224, 224, 225, 225, 226, 227, 227, 228, 228, 229, 229, 230, 230, 231, 231, 232, 232, 233, 233, 234, 234, 235, 235, 236, 236, 237, 237, 238, 238, 239, 239, 240, 240, 241, 241, 242, 242, 243, 243, 243, 244, 244, 245, 245, 246, 246, 247, 247, 247, 248, 248, 249, 249, 250, 250, 250, 251, 251, 252, 252, 253, 254, 255 };
	unsigned char* pSrc = srcData;
	for (int j = 0; j < height; j++)
	{
		for (int i = 0; i < width; i++)
		{
			pSrc[0] = CLIP3((pSrc[0] * (100 - ratio) + lightMap[pSrc[0]] * ratio) / 100, 0, 255);
			pSrc[1] = CLIP3((pSrc[1] * (100 - ratio) + lightMap[pSrc[1]] * ratio) / 100, 0, 255);
			pSrc[2] = CLIP3((pSrc[2] * (100 - ratio) + lightMap[pSrc[2]] * ratio) / 100, 0, 255);
			pSrc += channels;
		}
	}
	return 1;
}
int F_BeautyCamera_ColorMode(unsigned char* srcData,int width, int height, int channels,int ratio, int Mode) {
	unsigned char coldMap_b[256] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 62, 63, 65, 67, 69, 70, 72, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 93, 95, 96, 97, 98, 99, 100, 101, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 154, 155, 156, 157, 158, 159, 160, 161, 162, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 179, 180, 181, 182, 183, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 211, 211, 212, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 234, 235, 236, 237, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255 };
	unsigned char coldMap_g[256] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 54, 55, 56, 57, 58, 60, 62, 62, 62, 64, 65, 67, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 178, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 208, 209, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 232, 233, 234, 235, 237, 238, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 250, 251, 252, 253, 254, 255 };
	unsigned char coldMap_r[256] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 58, 58, 59, 61, 62, 64, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 204, 205, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255 };

	unsigned char warmMap_g[256] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 117, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 140, 141, 142, 143, 144, 145, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 174, 175, 176, 177, 178, 179, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 209, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 221, 222, 223, 224, 225, 226, 227, 227, 229, 230, 231, 232, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255 };
	unsigned char warmMap_b[256] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 58, 59, 60, 61, 61, 63, 64, 65, 64, 65, 66, 67, 68, 69, 70, 71, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 86, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 108, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 133, 134, 135, 136, 137, 138, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 166, 168, 168, 169, 170, 171, 172, 173, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 192, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 218, 219, 220, 221, 222, 223, 226, 226, 227, 228, 229, 230, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 242, 243, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255 };
	unsigned char warmMap_r[256] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 106, 107, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 122, 123, 124, 125, 126, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 149, 150, 151, 152, 153, 154, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 181, 182, 183, 182, 183, 184, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 201, 202, 203, 204, 205, 206, 207, 207, 208, 209, 210, 211, 212, 213, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 225, 226, 227, 228, 229, 230, 231, 231, 230, 230, 231, 233, 233, 234, 235, 236, 237, 238, 239, 240, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255 };
	unsigned char* pSrc = srcData;
	if (ratio < 0)
	{
		for (int j = 0; j < height; j++)
		{
			for (int i = 0; i < width; i++)
			{
				int k = -ratio;
				pSrc[0] = CLIP3((pSrc[0] * (50 - k) + coldMap_b[pSrc[0]] * k) / 50, 0, 255);
				pSrc[1] = CLIP3((pSrc[1] * (50 - k) + coldMap_g[pSrc[1]] * k) / 50, 0, 255);
				pSrc[2] = CLIP3((pSrc[2] * (50 - k) + coldMap_r[pSrc[2]] * k) / 50, 0, 255);
				pSrc += channels;
			}
		}
	}
	else
	{
		for (int j = 0; j < height; j++)
		{
			for (int i = 0; i < width; i++)
			{
				int k = ratio;
				pSrc[0] = CLIP3((pSrc[0] * (50 - k) + warmMap_b[pSrc[0]] * k) / 50, 0, 255);
				pSrc[1] = CLIP3((pSrc[1] * (50 - k) + warmMap_g[pSrc[1]] * k) / 50, 0, 255);
				pSrc[2] = CLIP3((pSrc[2] * (50 - k) + warmMap_r[pSrc[2]] * k) / 50, 0, 255);
				pSrc += channels;
			}
		}
	}
	return 1;
}
int F_BeautyCamera_SharpenMode(unsigned char* srcData,int width, int height, int channels, int ratio, int Mode) {
	int ret = 0;
	int length = height * channels * width;
	unsigned char* tmpData = (unsigned char*)malloc(sizeof(unsigned char) * length);
	memcpy(tmpData, srcData, sizeof(unsigned char) * length);
	if (Mode == 0) {
		F_LaplaceSharpen(tmpData, width, height, channels, 0);
	}
	unsigned char* pSrc = srcData;
	unsigned char* tmp = tmpData;
	for (int j = 0; j < height; j++)
	{
		for (int i = 0; i < width; i++)
		{
			pSrc[0] = CLIP3((pSrc[0] * (100 - ratio) + tmp[0] * ratio) / 100, 0, 255);
			pSrc[1] = CLIP3((pSrc[1] * (100 - ratio) + tmp[1] * ratio) / 100, 0, 255);
			pSrc[2] = CLIP3((pSrc[2] * (100 - ratio) + tmp[2] * ratio) / 100, 0, 255);
			pSrc += channels;
			tmp += channels;
		}
	}
	free(tmpData);
	return ret;
}
int F_BeautyCamera(unsigned char* srcData, int width, int height, int channels, unsigned char* curveMap, int skinGrindRatio, int skinWhiteRatio, int skinColorRatio, int sharpenRatio,int skinGrindMode, int skinWhiteMode, int skinColorMode, int sharpenMode) {
	int ret = 0;
	F_BeautyCamera_GrindMode(srcData,width,height,channels,skinGrindRatio, skinGrindMode);
	F_BeautyCamera_WhiteMode(srcData, width, height, channels, skinWhiteRatio, skinWhiteMode);
	F_BeautyCamera_ColorMode(srcData, width, height, channels, skinColorRatio, skinColorMode);
	F_BeautyCamera_SharpenMode(srcData, width, height, channels, sharpenRatio, sharpenMode);
	if (curveMap != NULL) {
		F_Filter512(srcData, width, height, channels, curveMap);
	}
	return ret;
}